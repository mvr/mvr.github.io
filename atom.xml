<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mitchell Is Typing</title>
  
  <link href="http://mvr.github.io/atom.xml" rel="self" />
  <link href="http://mvr.github.io" />
  <id>http://mvr.github.io/atom.xml</id>
  <updated>2025-09-30T00:00:00Z</updated>
  <author>
    <name>Mitchell Riley</name>
    
    <email>mitchell.v.riley@gmail.com</email>
    
  </author>
    <entry>
    <title>No‚ÄëThree‚ÄëIn‚ÄëLine, Quicker</title>
    <link href="/posts/no-three-in-line-quicker.html" />
    <id>/posts/no-three-in-line-quicker.html</id>
    
    <published>September 30, 2025</published>
    
    <updated>2025-09-30T00:00:00Z</updated>
    <author>
      <name>Mitchell Riley</name>
      
      <email>mitchell.v.riley@gmail.com</email>
      
    </author>
    <summary type="html"><![CDATA[<p>The code in the <a href="/posts/no-three-in-line.html">previous post</a> is
fairly quick, but of course we‚Äôd always prefer it to be quicker. I‚Äôll
keep a record here of things I‚Äôve tried and whether they worked.</p><p><a href="/posts/no-three-in-line-quicker.html">&gt; Read Post</a></p>]]></summary>
  </entry>
  <entry>
    <title>No‚ÄëThree‚ÄëIn‚ÄëLine</title>
    <link href="/posts/no-three-in-line.html" />
    <id>/posts/no-three-in-line.html</id>
    
    <published>September 1, 2025</published>
    
    <updated>2025-09-01T00:00:00Z</updated>
    <author>
      <name>Mitchell Riley</name>
      
      <email>mitchell.v.riley@gmail.com</email>
      
    </author>
    <summary type="html"><![CDATA[<p>The <a href="https://en.wikipedia.org/wiki/No-three-in-line_problem">No-three-in-line
problem</a> asks
how many points can be placed on a <code>n \times n</code> grid so that no three
points are on the same line, where the lines considered are of any
slope and not just orthogonal and diagonal. Each row/column can
contain at most 2 points, so clearly the answer is at most <code>2n</code>. The
real question is, can we actually achieve <code>2n</code> for every grid size?
It‚Äôs <a href="https://doi.org/10.4153%2FCMB-1968-062-3">conjectured</a> that the
answer is ‚Äúno‚Äù for grids large enough, but we don‚Äôt know where the
crossover point is and there‚Äôs <a href="http://web.archive.org/web/20131027174807/http://wso.williams.edu/~bchaffin/no_three_in_line/index.htm">no
indication</a>
that the number of <code>2n</code>-point solutions is falling away from
exponential growth, at least up to <code>18 \times 18</code>!</p>
<p>To my eye, the configurations that work can be quite balanced and
attractive. Here are some symmetrical ones for <code>14 \times 14</code> (though
in general the solutions are not necessarily symmetric in this way):</p>
<p>[diagram]</p>
<p>
<p>The most extensive searches for configurations so far have been done
by <a href="http://wwwhomes.uni-bielefeld.de/achim/no3in/readme.html">Achim
Flammenkamp</a>
and later by <a href="https://benchaffin.com/">Ben Chaffin</a>. I‚Äôve <a href="https://github.com/mvr/no-three-in-line">written
some CUDA code</a></p>
<p></label></p>
<p></input></span> of my
own with the goal of pushing things a little further, and I‚Äôll explain
it in the rest of this post.</p>
</p><p><a href="/posts/no-three-in-line.html">&gt; Read Post</a></p>]]></summary>
  </entry>
  <entry>
    <title>Linear/Nonlinear Logic and Linear Algebra</title>
    <link href="/posts/lnl.html" />
    <id>/posts/lnl.html</id>
    
    <published>May 29, 2025</published>
    
    <updated>2025-05-29T00:00:00Z</updated>
    <author>
      <name>Mitchell Riley</name>
      
      <email>mitchell.v.riley@gmail.com</email>
      
    </author>
    <summary type="html"><![CDATA[<p><!-- \newcommand{\unit}{ùüô} --></p>
<p>Benton‚Äôs <a href="https://ncatlab.org/nlab/files/BentonLinearLogic.pdf">Linear/Nonlinear
Logic</a> has
models in (lax) monoidal adjunctions between monoidal and cartesian
categories.</p>
<div class="figure">
[diagram]
</div>
<p>The tasks performed in GPU kernels often deal with linear and
nonlinear maps between real vector spaces.</p>
<div class="figure">
[diagram]
</div>
<p>I want to take this and run with it: let‚Äôs see what it looks like to
define some mixed linear/nonlinear functions in a linear/nonlinear
type theory. This feels to me so obvious that it must be written down
somewhere already. In the literature there is work that gets close
(and I‚Äôll do some comparisons at the end), but none are quite what I
want. Please let me know if I‚Äôve missed something.</p><p><a href="/posts/lnl.html">&gt; Read Post</a></p>]]></summary>
  </entry>
  <entry>
    <title>Movie Night</title>
    <link href="/posts/movie-night.html" />
    <id>/posts/movie-night.html</id>
    
    <published>May 15, 2025</published>
    
    <updated>2025-05-15T00:00:00Z</updated>
    <author>
      <name>Mitchell Riley</name>
      
      <email>mitchell.v.riley@gmail.com</email>
      
    </author>
    <summary type="html"><![CDATA[<p>For years now I‚Äôve been watching a movie in-person with friends every
weekend that I‚Äôve been able to. The movie selection system is perfect,
crystalline, sacred, with no downsides or exploitable vulnerabilities.</p>
<ol type="1">
<li>The nominator is the person who was previously nominator the
longest ago.</li>
<li>They choose two movies that haven‚Äôt been nominated before.</li>
<li>Everybody else votes for which to watch. If the vote is a tie, the
nominator breaks the vote.</li>
<li>In highly exceptional circumstances, the Benevolent Dictator For
Life may declare that a specific movie be watched, for example, if
we‚Äôre all about to go watch a sequel in-theatre and some people
need to get up to speed.</li>
</ol>
<p>
<p>Here‚Äôs what we‚Äôve watched so far</p>
<p></label></p>
<p></input></span>, together
with my ratings using almost the simplest possible system.</p>
<p></label></p>
<p></input></span></p><p><a href="/posts/movie-night.html">&gt; Read Post</a></p>]]></summary>
  </entry>
  <entry>
    <title>The Cars In My Backyard</title>
    <link href="/posts/cars-in-my-backyard.html" />
    <id>/posts/cars-in-my-backyard.html</id>
    
    <published>April 21, 2025</published>
    
    <updated>2025-04-21T00:00:00Z</updated>
    <author>
      <name>Mitchell Riley</name>
      
      <email>mitchell.v.riley@gmail.com</email>
      
    </author>
    <summary type="html"><![CDATA[<p>When I walk around my neighbourhood, I am struck by the beautiful
character of the houses here: the draughty Queenslanders and timber
fences, the majestic external staircases, I could go on forever. But
something always felt off, and I finally realise what it is. How can I
admire a house with elegant stilts and sweeping verandahs when there
is a bright red 2019 Ford Puma sitting in the driveway? Or appreciate
a compact, postwar masterpiece when it has a Hilux poking out around
the side? In the hours I‚Äôve spent positioning myself on the street so
I can bathe in the heritage of my neighbourhood, I have not found an
angle without some such monstrosity in my field of view.</p>
<p>We‚Äôve spent years fighting the vandals who want to destroy the
heritage of our neighbourhood. Why should we make an exception for
this? I see no other option: we must forbid residents from bringing
any new cars into the area. This is already a compromise, as if I had
my way we would ban every car newer than the house it is parked in
front of. (Of course, some especially old houses would need hitching
posts to be reinstalled.)</p><p><a href="/posts/cars-in-my-backyard.html">&gt; Read Post</a></p>]]></summary>
  </entry>
  <entry>
    <title>Quickly Detecting Cool Still Lifes</title>
    <link href="/posts/cool-still-lifes.html" />
    <id>/posts/cool-still-lifes.html</id>
    
    <published>April 8, 2025</published>
    
    <updated>2025-04-08T00:00:00Z</updated>
    <author>
      <name>Mitchell Riley</name>
      
      <email>mitchell.v.riley@gmail.com</email>
      
    </author>
    <summary type="html"><![CDATA[<p>
<p><a href="https://conwaylife.com/forums/viewtopic.php?f=9&amp;t=5997">QuFince</a> is a CUDA tool written by <a href="https://cp4space.hatsya.com/">apg</a> to conduct brute-force Game
of Life searches on the cartesian product of two sets of
configurations. That is, each configuration from set A is combined
with each configuration from set B, and run until stabilised. Not
every result is reported, only those where certain criteria are met.
Right now the options are either that the result has some interesting
period</p>
<p></label></p>
<p></input></span> (to hunt for <a href="https://conwaylife.com/wiki/Glider_synthesis">glider syntheses</a> of
<a href="https://conwaylife.com/wiki/Oscillator">oscillators</a>), or that the result contains a specified pattern (to
hunt for <a href="https://conwaylife.com/wiki/Synthesis_component">synthesis components</a> for specific still lifes).</p>
</p>
<p>One thing that <em>can‚Äôt</em> be done currently is have QuFince report any
combination that results in an interesting still life, but without
knowing which still life you want in advance. It‚Äôs not so obvious what
‚Äúinteresting still life‚Äù should mean exactly, but here are some
randomly chosen examples of things that should qualify:</p>
<p>[diagram]</p>
<p>We can‚Äôt use a population threshold as our criterion for
interestingness, because the typical result of one of these QuFince
trials is a bunch of uninteresting junk. One option is to do proper
object separation, like <a href="https://gitlab.com/apgoucher/apgmera">apgsearch</a>, and then report any object that
is sufficiently rare. But a QuFince search can conceivably test
hundreds of billions of configurations, and full object separation is
simply too slow.</p>
<p>Here I‚Äôll present an alternative, a simple heuristic that works well
enough.</p><p><a href="/posts/cool-still-lifes.html">&gt; Read Post</a></p>]]></summary>
  </entry>
  <entry>
    <title>Crawlers</title>
    <link href="/posts/crawlers.html" />
    <id>/posts/crawlers.html</id>
    
    <published>April 2, 2025</published>
    
    <updated>2025-04-02T00:00:00Z</updated>
    <author>
      <name>Mitchell Riley</name>
      
      <email>mitchell.v.riley@gmail.com</email>
      
    </author>
    <summary type="html"><![CDATA[<p>As a second foray into CUDA, I‚Äôve written a simple program to hunt for
<a href="https://conwaylife.com/wiki/Crawler">crawlers</a> in the Game of Life. The kernel itself is too revolting to
make public, but the supporting <a href="https://github.com/mvr/LifeAPI/blob/master/cuda/LifeStateCU.cu"><code>LifeStateCU</code></a> code may be useful for
others. (This could be seen as the first step in a GPU version of
<code>CatForce</code>/<code>LightCone</code>‚Ä¶)</p><p><a href="/posts/crawlers.html">&gt; Read Post</a></p>]]></summary>
  </entry>
  <entry>
    <title>Officers on the GPU</title>
    <link href="/posts/officers.html" />
    <id>/posts/officers.html</id>
    
    <published>March 8, 2025</published>
    
    <updated>2025-03-08T00:00:00Z</updated>
    <author>
      <name>Mitchell Riley</name>
      
      <email>mitchell.v.riley@gmail.com</email>
      
    </author>
    <summary type="html"><![CDATA[<p>
<p>Officers is a two-player ‚Äútake-and-break‚Äù game played with heaps of
coins (or if you prefer, piles of beans, or <a href="https://www.routledge.com/Winning-Ways-for-Your-Mathematical-Plays-Volume-1/Berlekamp-Conway-Guy/p/book/9781568811307">officers and their
subordinates</a>, or <a href="https://doi.org/10.2307/2589561">groups of people who form indivisible couples</a></p>
<p></label></p>
<p></input></span>, or ‚Ä¶). The two players
alternate turns, and every turn consists of removing a coin from a
heap and leaving the remainder in either one or two heaps. In
particular, taking away a lone coin is not a valid move. The winner is
the last player who can make a move.</p>
</p>
<p>For example, a game starting with a single pile of <code>10</code> coins might
proceed</p>
<p><code> [10] \xrightarrow{\mathcal{L}} [3, 6] \xrightarrow{\mathcal{R}} [3, 1, 4] \xrightarrow{\mathcal{L}} [1, 1, 1, 4] \xrightarrow{\mathcal{R}} [1, 1, 1, 1, 2] \xrightarrow{\mathcal{L}} [1, 1, 1, 1, 1] </code></p>
<p>
<p>at which point player <code>\mathcal{R}</code> is stuck, so player <code>\mathcal{L}</code>
has won.</p>
<p></label></p>
<p></input></span> Although
the total number of coins decreases by 1 each turn, the outcome of the
game is not determined simply by the parity of the starting number of
coins: the moment that the game ends also depends on how many piles
are created by the players making splitting moves. As we will soon
see, the winning move from any given position is extremely
unpredictable.</p>
</p>
<p>We can solve a game of this kind by calculating the <em>Grundy value</em> for
each position, and in this post I‚Äôm going to discuss my attempt at
calculating these values for Officers as fast as possible.</p><p><a href="/posts/officers.html">&gt; Read Post</a></p>]]></summary>
  </entry>
  <entry>
    <title>Searching for Conduits at Lightspeed</title>
    <link href="/posts/lightcone.html" />
    <id>/posts/lightcone.html</id>
    
    <published>February 9, 2025</published>
    
    <updated>2025-02-09T00:00:00Z</updated>
    <author>
      <name>Mitchell Riley</name>
      
      <email>mitchell.v.riley@gmail.com</email>
      
    </author>
    <summary type="html"><![CDATA[<p>Conduits are a central piece of technology in Conway‚Äôs Game of Life,
especially when engineering new pieces of stable circuitry. A conduit
moves an active pattern (like a <a href="https://conwaylife.com/wiki/Herschel">Herschel</a> or <a href="https://conwaylife.com/wiki/B-heptomino">B-heptomino</a>) from one
location to another by allowing it to react with a collection of
stable catalysts. Along the way, it may release some gliders, produce
additional active patterns or perform some other useful interaction,
and so new pieces of machinery can be constructed by chaining conduits
together.</p>
<p>As one very famous example we have the <a href="https://conwaylife.com/wiki/Fx77">Fx77</a> conduit discovered by
Dave Buckingham, which moves a Herschel forwards in 77 generations,
also flipping it.</p>
<p>[diagram]</p>
<p>Many software tools have been written to search for new conduits:
<a href="https://github.com/conwaylife/ptbsearch"><code>ptbsearch</code></a> by Paul Callahan, <a href="https://github.com/dvgrn/b3s23life/tree/main/catgl">Catalyst</a> by Gabriel Nivasch, <code>catgl</code> by
Dave Greene, <a href="https://github.com/simsim314/CatForce">CatForce</a> by Michael Simkin and <a href="https://github.com/nicobrownmath/LocalForce">LocalForce</a> by Nico Brown,
to name a few. Typically these tools are handed an active pattern and
a collection of catalysts, and spit out all placements of catalysts
that interact with the active pattern and recover. At this point,
hundreds of conduits are known, converting to and from various active
patterns. But the more the merrier!</p>
<p>I‚Äôve been working on yet another search tool, called <a href="https://github.com/mvr/lightcone">Lightcone</a>.
Lightcone is pretty speedy: it can find apg‚Äôs <a href="" title="https://conwaylife.com/wiki/Spartan_G-to-W-to-H">Spartan G-to-W</a> on
<a href="https://github.com/mvr/lightcone/blob/master/tests/thessalonic.toml">this</a> input file in just a couple of seconds. In this post I‚Äôll
explain some of the tricks it uses to cut down the search time.</p><p><a href="/posts/lightcone.html">&gt; Read Post</a></p>]]></summary>
  </entry>
  <entry>
    <title>Effective Algebraic Topology in Haskell</title>
    <link href="/posts/at.html" />
    <id>/posts/at.html</id>
    
    <published>September 22, 2022</published>
    
    <updated>2022-09-22T00:00:00Z</updated>
    <author>
      <name>Mitchell Riley</name>
      
      <email>mitchell.v.riley@gmail.com</email>
      
    </author>
    <summary type="html"><![CDATA[<p>Code available on <a href="https://github.com/mvr/at">GitHub</a>.</p>
<p>For a little while I have been working on this port of <a href="https://www-fourier.ujf-grenoble.fr/~sergerar/Kenzo/">Kenzo</a> from
Common Lisp to Haskell. Kenzo is a collection of algorithms for
explicit constructions on simplicial sets: the
<a href="https://github.com/mvr/at/blob/master/README.md"><code>README</code></a> in the
repository gives a list of what‚Äôs implemented and what should be
possible. The algorithms and implementations in Kenzo were created by
Francis Sergeraert, Julio Rubio Garcia, Xavier Dousson, Ana Romero and
many collaborators.</p>
<p>My goal was to implement just enough to compute <code>\pi_4 S^3</code>,
and I reached it today.</p>
<pre><code>...
&gt; let x = totalSpace s3 (Wbar kz1) fibration
&gt; putStrLn $ &quot;œÄ‚ÇÑ S¬≥ is: &quot; ++ show (homology x !! 4)
œÄ‚ÇÑ S¬≥ is: ‚Ñ§/2</code></pre>
<p>
<p>A fun capability it picked up along the way is calculating the
homology of Eilenberg-MacLane spaces <code>K(‚Ñ§/m,n)</code>, for example, here is
<code>K(‚Ñ§/3,2)</code>.</p>
<p></label></p>
<p></input></span></p>
</p>
<pre><code>&gt; homology (Wbar (WbarDiscrete (Zmod 3)))
[‚Ñ§,0,‚Ñ§/3,0,‚Ñ§/3,0,‚Ñ§/(3^2),‚Ñ§/3,‚Ñ§/3,‚Ñ§/3,‚Ñ§/3 ‚äï ‚Ñ§/3,^C</code></pre>
<p>I have a lot of ideas for improvements and additional features if
anybody is interested in joining in, so <mark>please email me if that‚Äôs
you or you know a student for whom this would make a good project</mark>.
For example, adding the construction of loop spaces and their homology
would be nice, as would homotopy pushouts in general.</p>
<p>On the implementation side, I have not spent any time optimising the
code and there are some obvious places to start, like using a proper
integer matrix library instead of a homemade one. These sorts of
optimisations would also make a good project for an undergraduate,
with not much mathematical background required.</p>
<p>Below, I‚Äôve copy-pasted a quick introduction I wrote to the ideas
behind Kenzo.</p><p><a href="/posts/at.html">&gt; Read Post</a></p>]]></summary>
  </entry>

</feed>
